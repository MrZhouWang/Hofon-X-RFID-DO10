C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:36:20 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\eeprom.obj
COMPILER INVOKED BY: C:\Program Files\kile\C51\BIN\C51.EXE ..\src\eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEX
                    -TEND PRINT(.\eeprom.lst) TABS(2) OBJECT(.\eeprom.obj)

line level    source

   1          #include "main.h"
   2          #include "eeprom.h"
   3          #include "uart.h"
   4          #include "led.h"
   5          
   6          typedef union union_temp16
   7          {
   8              UINT16 un_temp16 ;
   9              UINT8  un_temp8[2];
  10          }UNION_16;
  11          
  12          
  13          UINT8 Byte_Read(UINT8 * add);              //读一字节，调用前需打开IAP 功能
  14          void Byte_Program(UINT8 * add, UINT8 ch);  //字节编程，调用前需打开IAP 功能
  15          void Sector_Erase(UINT16 add);            //擦除扇区
  16          void IAP_Disable();                       //关闭IAP 功能
  17          
  18          
  19          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  20          UINT8 Byte_Read(UINT8 * add)
  21          {
  22   1          UNION_16 my_unTemp16;
  23   1          
  24   1          IAP_DATA = 0x00;
  25   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  26   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  27   1      
  28   1          my_unTemp16.un_temp16 = (UINT16)add;
  29   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  30   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  31   1      
  32   1          //EA = 0;
  33   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  34   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  35   1          _nop_();
  36   1          //EA = 1;
  37   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  38   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  39   1          return (IAP_DATA);
  40   1      }
  41          
  42          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  43          void Byte_Program(UINT8 * add, UINT8 ch)
  44          {
  45   1          UNION_16 my_unTemp16;
  46   1          
  47   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  48   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  49   1      
  50   1          my_unTemp16.un_temp16 = (UINT16)add;
  51   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  52   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  53   1      
  54   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:36:20 PAGE 2   

  55   1          //EA = 0;
  56   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  57   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  58   1          _nop_();
  59   1          //EA = 1;
  60   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  61   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  62   1      }
  63          
  64          //擦除扇区, 入口:DPTR = 扇区地址
  65          void Sector_Erase(UINT16 add)
  66          {
  67   1          UNION_16 my_unTemp16;
  68   1          
  69   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  70   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  71   1      
  72   1          my_unTemp16.un_temp16 = add;
  73   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  74   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  75   1      
  76   1          //EA = 0;
  77   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  78   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  79   1          _nop_();
  80   1          //EA = 1;
  81   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  82   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  83   1      }
  84          
  85          void IAP_Disable()
  86          {
  87   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  88   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  89   1          IAP_CONTR = 0;      //关闭IAP 功能
  90   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  91   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  92   1          IAP_ADDRH = 0;
  93   1          IAP_ADDRL = 0;
  94   1      }
  95           
  96          
  97          /*************************************************************************
  98                                Read len bytes from eeprom
  99          **************************************************************************/
 100          
 101          void eeprom_read_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
 102          {
 103   1          UINT8 i;
 104   1      
 105   1          for (i = 0; i < len; i++)
 106   1          {
 107   2              Buffer[i] = Byte_Read(beginAddr);
 108   2              beginAddr++;
 109   2          }
 110   1          
 111   1          return;
 112   1      }
 113          
 114          /*************************************************************************
 115                                write len bytes to eeprom
 116          **************************************************************************/
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:36:20 PAGE 3   

 117          void eeprom_write_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
 118          {
 119   1          UINT8 i;
 120   1      
 121   1          for (i = 0; i < len; i++)
 122   1          {
 123   2              Byte_Program(beginAddr, Buffer[i]);
 124   2              beginAddr++;
 125   2          }
 126   1      
 127   1          return;
 128   1      }
 129          
 130          /*************************************************************************
 131                                erase a sector
 132          **************************************************************************/
 133          
 134          //data flash: all 4K 
 135          //512Byte/sector, 8 sectors
 136          //Writing data flash must erase the sector, and then write every byte;
 137          //Each sector address as follows:
 138          UINT16 code SECTOR_PAGE[] = {
 139              0x0000, 0x0200, 0x0400, 0x0600, 
 140              0x0800, 0x0A00, 0x0C00, 0x0E00
 141          };
 142          
 143          void eeprom_erase_sector(UINT16 pageAddr)
 144          {
 145   1          Sector_Erase(pageAddr);
 146   1          
 147   1          return;
 148   1      }
 149          
 150          /*************************************
 151            Read Parameter from inn EEPROM
 152            with verify
 153          *************************************/
 154          #define PARA_LEN    5
 155          UINT8 ReadParaInEeprom(UINT8 offset)
 156          {
 157   1        UINT8 i = offset;
 158   1        UINT8 para_page_0[PARA_LEN];
 159   1        UINT8 para_page_1[PARA_LEN];
 160   1        UINT8 para_page_2[PARA_LEN];
 161   1      
 162   1        if (offset >= PARA_LEN) return 0xff;
 163   1        
 164   1          eeprom_read_block(para_page_0, (UINT8 *)SECTOR_PAGE[0], PARA_LEN);
 165   1          eeprom_read_block(para_page_1, (UINT8 *)SECTOR_PAGE[1], PARA_LEN);
 166   1          eeprom_read_block(para_page_2, (UINT8 *)SECTOR_PAGE[2], PARA_LEN);
 167   1         
 168   1        if (para_page_0[i] == para_page_1[i])
 169   1        {
 170   2          if (para_page_1[i] != para_page_2[i])           //sector 2 error
 171   2          {
 172   3              para_page_2[i] = para_page_0[i];            //Modify error byte
 173   3                  eeprom_erase_sector(SECTOR_PAGE[2]);        //Erase sector 2
 174   3                                                              //Write sector 2
 175   3              eeprom_write_block(para_page_2, (UINT8 *)SECTOR_PAGE[2] , PARA_LEN);
 176   3          }
 177   2          return para_page_0[i];  
 178   2        }
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:36:20 PAGE 4   

 179   1        else if (para_page_0[i] == para_page_2[i])          //sector 1 error
 180   1        {
 181   2              para_page_1[i] = para_page_0[i];                //Modify error byte
 182   2            eeprom_erase_sector(SECTOR_PAGE[1]);            //Erase sector 1
 183   2                                                            //Write sector 1
 184   2            eeprom_write_block(para_page_1, (UINT8 *)SECTOR_PAGE[1] , PARA_LEN);
 185   2            return para_page_0[i];  
 186   2        }
 187   1        else                                                //Sector 0 error
 188   1        {
 189   2            para_page_0[i] = para_page_1[i];                //Modify error byte
 190   2            eeprom_erase_sector(SECTOR_PAGE[0]);            //Erase sector 0
 191   2            eeprom_write_block(para_page_0, (UINT8 *)SECTOR_PAGE[0] , PARA_LEN);
 192   2            return para_page_1[i];        
 193   2        }
 194   1      }
 195          /*******************************************************************************
 196                        save Parameter to EEPROM
 197            input:   none
 198            output:  none         
 199          *******************************************************************************/
 200          void SaveParaToBlock()
 201          {
 202   1        UINT8 i;
 203   1        UINT8 buffer[5];
 204   1        buffer[0] = address[0] * 100 + address[1]*10 + address[2];
 205   1        buffer[1] = FinishedLED;
 206   1        buffer[2] = WtTime;
 207   1        buffer[3] = FnDefine;
 208   1        buffer[4] = DispMode;
 209   1        for (i=0; i<3; i++)
 210   1        {
 211   2            eeprom_erase_sector(SECTOR_PAGE[i]);   
 212   2          eeprom_write_block (buffer, (UINT8 *)SECTOR_PAGE[i], 5);
 213   2        }
 214   1      }
 215          /*******************************************************************************
 216                        Load Parameter from EEPROM
 217            input:   none      
 218            output:  none         
 219          *******************************************************************************/
 220          void LoadParaInEeprom(void)
 221          {
 222   1        UINT8 buffer[5];
 223   1      
 224   1        buffer[0] = ReadParaInEeprom(EE_ADDRESS);
 225   1        buffer[1] = ReadParaInEeprom(EE_FINISHEDLED);
 226   1        buffer[2] = ReadParaInEeprom(EE_WTTIME);
 227   1        buffer[3] = ReadParaInEeprom(EE_FNDEFINE);
 228   1        buffer[4] = ReadParaInEeprom(EE_DISPMODE);
 229   1      
 230   1          if (buffer[0] > MAX_ADDR)   
 231   1          {
 232   2              buffer[0] = 1;          //默认加载参数
 233   2          }
 234   1          if (buffer[1] > 3)      //Finished LED    0,1,2,3
 235   1          {
 236   2              buffer[1] = 0;         
 237   2          }
 238   1          if (buffer[2] > 5)      //WtTime      0:80ms; 1:160ms;  2:240ms;  3:320ms;  4:400;  5:480
 239   1          {
 240   2              buffer[2] = 5;         
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:36:20 PAGE 5   

 241   2          }
 242   1          if (buffer[3] > 1)      //FnDefine      0:ZeroPick;   1:FullContainer Pick
 243   1          {
 244   2              buffer[3] = 0;         
 245   2          }
 246   1          if (buffer[4] > 1)      //DispMode      0:TaskDisp;   1:Text Disp
 247   1          {
 248   2              buffer[4] = 0;         
 249   2          }
 250   1      
 251   1        address[0] = (UINT8)(buffer[0]/100);
 252   1        address[1] = (UINT8)(((UINT8)(buffer[0]%100))/10);
 253   1        address[2] = buffer[0]%10;
 254   1      
 255   1        FinishedLED = buffer[1];
 256   1        WtTime = buffer[2];
 257   1        FnDefine = buffer[3];
 258   1        DispMode = buffer[4];
 259   1      }
 260          /*******************************************************************************
 261                          END         
 262          *******************************************************************************/
 263          
 264          
 265          
 266          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1061    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
