C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MRC522_API
OBJECT MODULE PLACED IN ..\OUT\mrc522_api.obj
COMPILER INVOKED BY: C:\C51\BIN\C51.EXE ..\SRC\mrc522_api.c LARGE BROWSE INCDIR(..\INC;..\PRO;..\SRC) DEBUG OBJECTEXTEND
                    - PRINT(.\mrc522_api.lst) OBJECT(..\OUT\mrc522_api.obj)

line level    source

   1          #define MRC522_API_GLOBAL
   2          #include "include.h" 
   3          ////////////////////////////////////////////////////////////////////////////////
   4          // 功能描述 ：读卡里面的数据
   5          // 输入参数 : block:要读哪一块
   6          //                rc_au: 密码类型 0x60 A 0x61 B
   7          //            byte_num: 读出字节个数
   8          //            sec_key :所需密码
   9          // 返回参数 : 无
  10          // 说明     : 
  11          ////////////////////////////////////////////////////////////////////////////////
  12          void M1_Write(unsigned char rc_au,unsigned char rc_block,unsigned char *sec_key)
  13          {
  14   1               unsigned char status,i,j;
  15   1               unsigned int tem;
  16   1               for(j=0;j<5;j++)
  17   1               {
  18   2                       status = PcdRequest(PICC_REQALL, g_ucTempbuf);//寻卡
  19   2                   if (status == MI_OK)
  20   2                   {   
  21   3                           kk_con=0;//一旦有卡接近就清楚无卡状态计数
  22   3      //                       printf("卡的类型:"); 
  23   3      //                   for(i=0;i<2;i++)
  24   3      //                       {
  25   3      //                          tem=g_ucTempbuf[i];
  26   3      //                          printf("%X",tem);   
  27   3      //                       }
  28   3                               if(ccon_flag==0)
  29   3                               {  
  30   4                                       status = PcdAnticoll(g_ucTempbuf);//防冲撞
  31   4                                       if (status == MI_OK)
  32   4                                       {
  33   5                                               printf("卡序列号:");   //超级终端显示,
  34   5                                               for(i=0;i<4;i++)
  35   5                                               {
  36   6                                                 tem=g_ucTempbuf[i];
  37   6                                                 printf("%X",tem);                    
  38   6                                               }
  39   5                                              printf("\n");
  40   5                                              status = PcdSelect(g_ucTempbuf);//选定卡片
  41   5                                              if (status == MI_OK)
  42   5                                              {
  43   6                                                  status = PcdAuthState(rc_au, rc_block, sec_key, g_ucTempbuf);//验证卡片密码
  44   6                                                      if (status == MI_OK)
  45   6                                                      {
  46   7                                                         status = PcdWrite(rc_block, rc_data);//写扇区第0块
  47   7                                                         if (status == MI_OK) 
  48   7                                                         {
  49   8                                                                 status = PcdWrite(rc_block+1,rc_data);//写块
  50   8                                                                 if (status == MI_OK) 
  51   8                                                             {
  52   9                                                                     status = PcdWrite(rc_block+2, rc_data);//写块
  53   9                                                                     if (status == MI_OK)     
  54   9                                                                     printf("成功写入！\n");  //超级终端显示,                                                                  
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 2   

  55   9                                                             PcdHalt();
  56   9                                                             con_flag=1;
  57   9                                                                     rc_blink_read=LED_ON_TIME;
  58   9                                                                     break;
  59   9                                                                      }
  60   8                                                              }               
  61   7                                                        }
  62   6                                                       
  63   6                                               }
  64   5                                              
  65   5                              }
  66   4                       }
  67   3                      }
  68   2                   
  69   2                       else
  70   2                       {
  71   3      
  72   3                              kk_con++;
  73   3                              if(kk_con==1)
  74   3                              {
  75   4                                 PcdReset();
  76   4                     PcdAntennaOff(); 
  77   4                     PcdAntennaOn();  
  78   4                              }
  79   3                              if( kk_con> MAX_K_CON)
  80   3                              {
  81   4                                      kk_con= MAX_K_CON;
  82   4                                      ccon_flag=0;
  83   4                              }        
  84   3                       }
  85   2               }      
  86   1      }
  87          ////////////////////////////////////////////////////////////////////////////////
  88          // 功能描述 ：读卡里面的数据
  89          // 输入参数 : block:要读哪一块
  90          //                rc_au: 密码类型 0x60 A 0x61 B
  91          //            byte_num: 读出字节个数
  92          //            sec_key :所需密码
  93          // 返回参数 : 无
  94          // 说明     : 
  95          ////////////////////////////////////////////////////////////////////////////////
  96          void M1_Read(unsigned char rc_au,unsigned char rc_block,unsigned char byte_num,unsigned char *sec_key)
  97          {
  98   1               unsigned char status,i;
  99   1                   unsigned int tem;
 100   1      
 101   1                       status = PcdRequest(PICC_REQALL, g_ucTempbuf);//寻卡
 102   1                   if (status == MI_OK)
 103   1                   {   
 104   2                           k_con=0;//一旦有卡接近就清楚无卡状态计数
 105   2      //                       printf("卡的类型:"); 
 106   2      //                   for(i=0;i<2;i++)
 107   2      //                       {
 108   2      //                          tem=g_ucTempbuf[i];
 109   2      //                          printf("%X",tem);   
 110   2      //                       }
 111   2                               if(con_flag==0)
 112   2                               {  
 113   3                                       status = PcdAnticoll(g_ucTempbuf);//防冲撞
 114   3                                       if (status == MI_OK)
 115   3                                       {
 116   4      //                                       printf("卡序列号:");   //超级终端显示,
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 3   

 117   4      //                                       for(i=0;i<4;i++)
 118   4      //                                       {
 119   4      //                                         tem=g_ucTempbuf[i];
 120   4      //                                         printf("%X",tem);                    
 121   4      //                                       }
 122   4      //                                      printf("\n");
 123   4                                              status = PcdSelect(g_ucTempbuf);//选定卡片
 124   4                                              if (status == MI_OK)
 125   4                                              {
 126   5                                                  status = PcdAuthState(rc_au, rc_block, sec_key, g_ucTempbuf);//验证卡片密码
 127   5                                                      if (status == MI_OK)
 128   5                                                      {
 129   6                                                         status = PcdRead(rc_block, g_ucTempbuf);//读块
 130   6                                                         if (status == MI_OK) 
 131   6                                                         {
 132   7      //                                                         printf("中华人民军队工号：");        //超级终端显示, 
 133   7      //                                                         for(i=0;i<byte_num;i++)
 134   7      //                                                         {
 135   7      //                                                            tem=g_ucTempbuf[i];
 136   7      //                                                        printf("%X",tem);
 137   7      //                                                                      
 138   7      //                                                 }
 139   7      //                                                         printf("\n");
 140   7                                                               
 141   7                                                         PcdHalt();
 142   7                                                         con_flag=1;
 143   7                                                                 rc_blink_read=LED_ON_TIME;
 144   7                                                                 Send485SerialByte(g_ucTempbuf,20);   
 145   7                                                               //  break;
 146   7                                                         }
 147   6                                                      }       
 148   5                                              }
 149   4                                       }
 150   3                               }
 151   2                   }
 152   1                       else
 153   1                       {
 154   2      
 155   2                              k_con++;
 156   2                              if(k_con==1)
 157   2                              {
 158   3                                 PcdReset();
 159   3                     PcdAntennaOff(); 
 160   3                                // DelayMs(1);
 161   3                     PcdAntennaOn();  
 162   3                                 //DelayMs(1);
 163   3                              }
 164   2                              if( k_con> MAX_K_CON)
 165   2                              {
 166   3                                      k_con= MAX_K_CON;
 167   3                                      con_flag=0;
 168   3                              }
 169   2                       }
 170   1                              
 171   1             
 172   1      }          
*** WARNING C280 IN LINE 96 OF ..\SRC\MRC522_API.C: 'byte_num': unreferenced local variable
*** WARNING C280 IN LINE 98 OF ..\SRC\MRC522_API.C: 'i': unreferenced local variable
*** WARNING C280 IN LINE 99 OF ..\SRC\MRC522_API.C: 'tem': unreferenced local variable
 173          //////////////////// ////////////////////////////////////////////////////////////
 174          // 功能描述 : 寻卡
 175          // 输入参数 : req_code[IN]:寻卡方式
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 4   

 176          //                0x52 = 寻感应区内所有符合14443A标准的卡
 177          //                0x26 = 寻未进入休眠状态的卡
 178          //            pTagType[OUT]：卡片类型代码
 179          //                0x4400 = Mifare_UltraLight
 180          //                0x0400 = Mifare_One(S50)
 181          //                0x0200 = Mifare_One(S70)
 182          //                0x0800 = Mifare_Pro(X)
 183          //                0x4403 = Mifare_DESFire
 184          // 返回参数 : 成功返回MI_OK
 185          // 说明     :       
 186          ////////////////////////////////////////////////////////////////////////////////
 187          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
 188          {
 189   1         char status;  
 190   1         unsigned int  unLen;
 191   1         unsigned char ucComMF522Buf[MAXRLEN]; 
 192   1      
 193   1         ClearBitMask(Status2Reg,0x08);
 194   1         WriteRawRC(BitFramingReg,0x07);
 195   1         SetBitMask(TxControlReg,0x03);
 196   1       
 197   1         ucComMF522Buf[0] = req_code;
 198   1      
 199   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
 200   1         
 201   1         if ((status == MI_OK) && (unLen == 0x10))
 202   1         {    
 203   2             *pTagType     = ucComMF522Buf[0];
 204   2             *(pTagType+1) = ucComMF522Buf[1];
 205   2         }
 206   1         else
 207   1         {   status = MI_ERR;  
 208   2       
 209   2      
 210   2      
 211   2              }
 212   1         
 213   1         return status;
 214   1      }
 215          ////////////////////////////////////////////////////////////////////////////////
 216          // 功能描述 : 防冲撞 
 217          // 输入参数 : pSnr[OUT]:卡片序列号，4字节
 218          // 返回参数 : 成功返回MI_OK
 219          // 说明     :       
 220          //////////////////////////////////////////////////////////////////////////////// 
 221          char PcdAnticoll(unsigned char *pSnr)
 222          {
 223   1          char status;
 224   1          unsigned char i,snr_check=0;
 225   1          unsigned int  unLen;
 226   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 227   1          
 228   1      
 229   1          ClearBitMask(Status2Reg,0x08);
 230   1          WriteRawRC(BitFramingReg,0x00);
 231   1          ClearBitMask(CollReg,0x80);
 232   1       
 233   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 234   1          ucComMF522Buf[1] = 0x20;
 235   1      
 236   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
 237   1      
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 5   

 238   1          if (status == MI_OK)
 239   1          {
 240   2               for (i=0; i<4; i++)
 241   2               {   
 242   3                   *(pSnr+i)  = ucComMF522Buf[i];
 243   3                   snr_check ^= ucComMF522Buf[i];
 244   3      
 245   3               }
 246   2               if (snr_check != ucComMF522Buf[i])
 247   2               {   status = MI_ERR;    }
 248   2          }
 249   1          
 250   1          SetBitMask(CollReg,0x80);
 251   1          return status;
 252   1      }
 253          ////////////////////////////////////////////////////////////////////////////////
 254          // 功能描述 : 选定卡片
 255          // 输入参数 : pSnr[IN]:卡片序列号，4字节
 256          // 返回参数 : 成功选定卡片返回MI_OK
 257          // 说明     :       
 258          ////////////////////////////////////////////////////////////////////////////////
 259          char PcdSelect(unsigned char *pSnr)
 260          {
 261   1          char status;
 262   1          unsigned char i;
 263   1          unsigned int  unLen;
 264   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 265   1          
 266   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 267   1          ucComMF522Buf[1] = 0x70;
 268   1          ucComMF522Buf[6] = 0;
 269   1          for (i=0; i<4; i++)
 270   1          {
 271   2              ucComMF522Buf[i+2] = *(pSnr+i);
 272   2              ucComMF522Buf[6]  ^= *(pSnr+i);
 273   2          }
 274   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 275   1        
 276   1          ClearBitMask(Status2Reg,0x08);
 277   1      
 278   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 279   1          
 280   1          if ((status == MI_OK) && (unLen == 0x18))
 281   1          {   status = MI_OK;  }
 282   1          else
 283   1          {   status = MI_ERR;    }
 284   1      
 285   1          return status;
 286   1      }     
 287          ////////////////////////////////////////////////////////////////////////////////
 288          // 功能描述 : 命令卡片进入休眠状态 
 289          // 输入参数 : auth_mode[IN]: 密码验证模式
 290          //                 0x60 = 验证A密钥
 291          //                 0x61 = 验证B密钥 
 292          //            addr[IN]：块地址
 293          //            pKey[IN]：密码
 294          //            pSnr[IN]：卡片序列号，4字节
 295          // 返回参数 : 成功返回MI_OK
 296          // 说明     :       
 297          ////////////////////////////////////////////////////////////////////////////////         
 298          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 299          {
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 6   

 300   1          char status;
 301   1          unsigned int  unLen;
 302   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 303   1      
 304   1          ucComMF522Buf[0] = auth_mode;
 305   1          ucComMF522Buf[1] = addr;
 306   1          for (i=0; i<6; i++)
 307   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 308   1          for (i=0; i<6; i++)
 309   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 310   1       //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 311   1       //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 312   1          
 313   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 314   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 315   1          {   status = MI_ERR;   }
 316   1          
 317   1          return status;
 318   1      }
 319          ////////////////////////////////////////////////////////////////////////////////
 320          // 功能描述 : 读取M1卡一块数据 
 321          // 输入参数 : addr[IN]：块地址
 322          //            pData[OUT]：读出的数据，16字节
 323          // 返回参数 : 成功返回MI_OK
 324          // 说明     :       
 325          ////////////////////////////////////////////////////////////////////////////////
 326          char PcdRead(unsigned char addr,unsigned char *pData)
 327          {
 328   1          char status;
 329   1          unsigned int  unLen;
 330   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 331   1      
 332   1          ucComMF522Buf[0] = PICC_READ;
 333   1          ucComMF522Buf[1] = addr;
 334   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 335   1         
 336   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 337   1          if ((status == MI_OK) && (unLen == 0x90))
 338   1       //   {   memcpy(pData, ucComMF522Buf, 16);   }
 339   1          {
 340   2              for (i=0; i<16; i++)
 341   2              {    *(pData+i) = ucComMF522Buf[i];   }
 342   2          }
 343   1          else
 344   1          {   status = MI_ERR;   }
 345   1          
 346   1          return status;
 347   1      }   
 348          ////////////////////////////////////////////////////////////////////////////////
 349          // 功能描述 : 写数据到M1卡一块
 350          // 输入参数 : addr[IN]：块地址
 351          //            pData[IN]：写入的数据，16字节
 352          // 返回参数 : 成功返回MI_OK
 353          // 说明     :       
 354          ////////////////////////////////////////////////////////////////////////////////            
 355          char PcdWrite(unsigned char addr,unsigned char *pData)
 356          {
 357   1          char status;
 358   1          unsigned int  unLen;
 359   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 360   1          
 361   1          ucComMF522Buf[0] = PICC_WRITE;
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 7   

 362   1          ucComMF522Buf[1] = addr;
 363   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 364   1       
 365   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 366   1      
 367   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 368   1          {   status = MI_ERR;   }
 369   1              
 370   1          if (status == MI_OK)
 371   1          {
 372   2              //memcpy(ucComMF522Buf, pData, 16);
 373   2              for (i=0; i<16; i++)
 374   2              {    ucComMF522Buf[i] = *(pData+i);   }
 375   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 376   2      
 377   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 378   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 379   2              {   status = MI_ERR;   }
 380   2          }
 381   1          
 382   1          return status;
 383   1      } 
 384          ////////////////////////////////////////////////////////////////////////////////
 385          // 功能描述 : 扣款和充值
 386          // 输入参数 : dd_mode[IN]：命令字
 387          //               0xC0 = 扣款
 388          //               0xC1 = 充值
 389          //            addr[IN]：钱包地址
 390          //            pValue[IN]：4字节增(减)值，低位在前
 391          // 返回参数 : 成功返回MI_OK
 392          // 说明     :       
 393          ////////////////////////////////////////////////////////////////////////////////           
 394          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 395          {
 396   1          char status;
 397   1          unsigned int  unLen;
 398   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 399   1          
 400   1          ucComMF522Buf[0] = dd_mode;
 401   1          ucComMF522Buf[1] = addr;
 402   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 403   1       
 404   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 405   1      
 406   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 407   1          {   status = MI_ERR;   }
 408   1              
 409   1          if (status == MI_OK)
 410   1          {
 411   2             // memcpy(ucComMF522Buf, pValue, 4);
 412   2              for (i=0; i<16; i++)
 413   2              {    ucComMF522Buf[i] = *(pValue+i);   }
 414   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 415   2              unLen = 0;
 416   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 417   2              if (status != MI_ERR)
 418   2              {    status = MI_OK;    }
 419   2          }
 420   1          
 421   1          if (status == MI_OK)
 422   1          {
 423   2              ucComMF522Buf[0] = PICC_TRANSFER;
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 8   

 424   2              ucComMF522Buf[1] = addr;
 425   2              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 426   2         
 427   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 428   2      
 429   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 430   2              {   status = MI_ERR;   }
 431   2          }
 432   1          return status;
 433   1      }
 434          ////////////////////////////////////////////////////////////////////////////////
 435          // 功能描述 : 备份钱包
 436          // 输入参数 : sourceaddr[IN]：源地址    goaladdr[IN]：目标地址           
 437          // 返回参数 : 成功返回MI_OK
 438          // 说明     :       
 439          ////////////////////////////////////////////////////////////////////////////////
 440          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 441          {
 442   1          char status;
 443   1          unsigned int  unLen;
 444   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 445   1      
 446   1          ucComMF522Buf[0] = PICC_RESTORE;
 447   1          ucComMF522Buf[1] = sourceaddr;
 448   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 449   1       
 450   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 451   1      
 452   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 453   1          {   status = MI_ERR;   }
 454   1          
 455   1          if (status == MI_OK)
 456   1          {
 457   2              ucComMF522Buf[0] = 0;
 458   2              ucComMF522Buf[1] = 0;
 459   2              ucComMF522Buf[2] = 0;
 460   2              ucComMF522Buf[3] = 0;
 461   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 462   2       
 463   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 464   2              if (status != MI_ERR)
 465   2              {    status = MI_OK;    }
 466   2          }
 467   1          
 468   1          if (status != MI_OK)
 469   1          {    return MI_ERR;   }
 470   1          
 471   1          ucComMF522Buf[0] = PICC_TRANSFER;
 472   1          ucComMF522Buf[1] = goaladdr;
 473   1      
 474   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 475   1       
 476   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 477   1      
 478   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 479   1          {   status = MI_ERR;   }
 480   1      
 481   1          return status;
 482   1      }
 483          ////////////////////////////////////////////////////////////////////////////////
 484          // 功能描述 : 命令卡片进入休眠状态 
 485          // 输入参数 : 
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 9   

 486          // 返回参数 : 成功返回MI_OK
 487          // 说明     :       
 488          ////////////////////////////////////////////////////////////////////////////////
 489          char PcdHalt(void)
 490          {
 491   1          char status;
 492   1          unsigned int  unLen;
 493   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 494   1      
 495   1          ucComMF522Buf[0] = PICC_HALT;
 496   1          ucComMF522Buf[1] = 0;
 497   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 498   1       
 499   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 500   1      
 501   1          return MI_OK;
 502   1      }
 503          ////////////////////////////////////////////////////////////////////////////////
 504          // 功能描述 : 用MF522计算CRC16函数 
 505          // 输入参数 : 
 506          // 返回参数 : 
 507          // 说明     :       
 508          ////////////////////////////////////////////////////////////////////////////////
 509          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 510          {
 511   1          unsigned char i,n;
 512   1          ClearBitMask(DivIrqReg,0x04);
 513   1          WriteRawRC(CommandReg,PCD_IDLE);
 514   1          SetBitMask(FIFOLevelReg,0x80);
 515   1          for (i=0; i<len; i++)
 516   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 517   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 518   1          i = 0xFF;
 519   1          do 
 520   1          {
 521   2              n = ReadRawRC(DivIrqReg);
 522   2              i--;
 523   2          }
 524   1          while ((i!=0) && !(n&0x04));
 525   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 526   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 527   1      }
 528          ////////////////////////////////////////////////////////////////////////////////
 529          // 功能描述 : 复位RC522 
 530          // 输入参数 : 
 531          // 返回参数 : 成功返回MI_OK
 532          // 说明     :       
 533          ////////////////////////////////////////////////////////////////////////////////
 534          char PcdReset(void)
 535          {
 536   1              unsigned char i;
 537   1          MF522_RST=1;
 538   1      
 539   1                      _nop_();                  
 540   1      
 541   1          MF522_RST=0;
 542   1      
 543   1                      _nop_();                   
 544   1      
 545   1          MF522_RST=1;
 546   1      
 547   1                      DelayMs(1);               
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 10  

 548   1              
 549   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 550   1      
 551   1                      _nop_();                  
 552   1              
 553   1          
 554   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 555   1          WriteRawRC(TReloadRegL,30);           
 556   1          WriteRawRC(TReloadRegH,0);
 557   1          WriteRawRC(TModeReg,0x8D);
 558   1          WriteRawRC(TPrescalerReg,0x3E);
 559   1          WriteRawRC(TxAutoReg,0x40);
 560   1              i=ReadRawRC(TReloadRegL);
 561   1              //while((i!=30));
 562   1          return MI_OK;
 563   1      }
 564          ////////////////////////////////////////////////////////////////////////////////
 565          // 功能描述 : 通过RC522和ISO14443卡通讯
 566          // 输入参数 : 
 567          // 返回参数 : 
 568          // 说明     : Command[IN]:RC522命令字
 569          //            pInData[IN]:通过RC522发送到卡片的数据
 570          //            InLenByte[IN]:发送数据的字节长度
 571          //                pOutData[OUT]:接收到的卡片返回数据
 572          //            *pOutLenBit[OUT]:返回数据的位长度      
 573          ////////////////////////////////////////////////////////////////////////////////
 574          char PcdComMF522(unsigned char Command, 
 575                           unsigned char *pInData, 
 576                           unsigned char InLenByte,
 577                           unsigned char *pOutData, 
 578                           unsigned int  *pOutLenBit)
 579          {
 580   1          char status = MI_ERR;
 581   1          unsigned char irqEn   = 0x00;
 582   1          unsigned char waitFor = 0x00;
 583   1          unsigned char lastBits;
 584   1          unsigned char n;
 585   1          unsigned int i;
 586   1          switch (Command)
 587   1          {
 588   2             case PCD_AUTHENT:
 589   2                irqEn   = 0x12;
 590   2                waitFor = 0x10;
 591   2                break;
 592   2             case PCD_TRANSCEIVE:
 593   2                irqEn   = 0x77;
 594   2                waitFor = 0x30;
 595   2                break;
 596   2             default:
 597   2               break;
 598   2          }
 599   1         
 600   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 601   1          ClearBitMask(ComIrqReg,0x80);
 602   1          WriteRawRC(CommandReg,PCD_IDLE);
 603   1          SetBitMask(FIFOLevelReg,0x80);
 604   1          
 605   1          for (i=0; i<InLenByte; i++)
 606   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 607   1          WriteRawRC(CommandReg, Command);
 608   1         
 609   1          
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 11  

 610   1          if (Command == PCD_TRANSCEIVE)
 611   1          {    SetBitMask(BitFramingReg,0x80);  }
 612   1          
 613   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 614   1          do 
 615   1          {
 616   2               n = ReadRawRC(ComIrqReg);
 617   2               i--;
 618   2          }
 619   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 620   1          ClearBitMask(BitFramingReg,0x80);
 621   1                    
 622   1          if (i!=0)
 623   1          {    
 624   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 625   2               {
 626   3                   status = MI_OK;
 627   3                   if (n & irqEn & 0x01)
 628   3                   {   status = MI_NOTAGERR;   }
 629   3                   if (Command == PCD_TRANSCEIVE)
 630   3                   {
 631   4                      n = ReadRawRC(FIFOLevelReg);
 632   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 633   4                      if (lastBits)
 634   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 635   4                      else
 636   4                      {   *pOutLenBit = n*8;   }
 637   4                      if (n == 0)
 638   4                      {   n = 1;    }
 639   4                      if (n > MAXRLEN)
 640   4                      {   n = MAXRLEN;   }
 641   4                      for (i=0; i<n; i++)
 642   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 643   4                  }
 644   3               }
 645   2               else
 646   2               {   status = MI_ERR;   }
 647   2              
 648   2         }
 649   1         
 650   1      
 651   1         SetBitMask(ControlReg,0x80);           // stop timer now
 652   1         WriteRawRC(CommandReg,PCD_IDLE); 
 653   1         return status;
 654   1      }
 655          ////////////////////////////////////////////////////////////////////////////////
 656          // 功能描述 : 开启天线  
 657          // 输入参数 : 
 658          // 返回参数 : 
 659          // 说明     : 每次启动或关闭天险发射之间应至少有1ms的间隔      
 660          ////////////////////////////////////////////////////////////////////////////////
 661          void PcdAntennaOn()
 662          {
 663   1          unsigned char i;
 664   1          i = ReadRawRC(TxControlReg);
 665   1          if (!(i & 0x03))
 666   1          {
 667   2              SetBitMask(TxControlReg, 0x03);
 668   2          }
 669   1      }
 670          ////////////////////////////////////////////////////////////////////////////////
 671          // 功能描述 : 关闭天线 
C51 COMPILER V9.00   MRC522_API                                                            07/18/2016 14:16:51 PAGE 12  

 672          // 输入参数 : 
 673          // 返回参数 : 
 674          // 说明     :       
 675          ////////////////////////////////////////////////////////////////////////////////
 676          void PcdAntennaOff()
 677          {
 678   1          ClearBitMask(TxControlReg, 0x03);
 679   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2994    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =      5     258
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
