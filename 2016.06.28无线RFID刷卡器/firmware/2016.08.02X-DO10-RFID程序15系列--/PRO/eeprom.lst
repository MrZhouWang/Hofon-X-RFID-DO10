C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:54:18 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\OUT\eeprom.obj
COMPILER INVOKED BY: C:\Program Files\kile\C51\BIN\C51.EXE ..\SRC\eeprom.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\INC;..\PRO;..\SRC) DEBUG PRINT(.\eeprom.lst) TABS(2) OBJECT(..\OUT\eeprom.obj)

line level    source

   1          
   2          #include "include.h"
   3          
   4          
   5          typedef union union_temp16
   6          {
   7              UINT16 un_temp16 ;
   8              UINT8  un_temp8[2];
   9          }UNION_16;
  10          
  11          
  12          UINT8 Byte_Read(UINT8 * add);              //读一字节，调用前需打开IAP 功能
  13          void Byte_Program(UINT8 * add, UINT8 ch);  //字节编程，调用前需打开IAP 功能
  14          void Sector_Erase(UINT16 add);            //擦除扇区
  15          void IAP_Disable();                       //关闭IAP 功能
  16          
  17          
  18          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  19          UINT8 Byte_Read(UINT8 * add)
  20          {
  21   1          UNION_16 my_unTemp16;
  22   1          
  23   1          IAP_DATA = 0x00; //清空数据寄存器
  24   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  25   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  26   1      
  27   1          my_unTemp16.un_temp16 = (UINT16)add;            
  28   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址        51单片机是Big_endian;
  29   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  30   1      
  31   1          //EA = 0;
  32   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  33   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  34   1          _nop_();
  35   1          //EA = 1;
  36   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  37   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  38   1          return (IAP_DATA);
  39   1      }
  40          
  41          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  42          void Byte_Program(UINT8 * add, UINT8 ch)
  43          {
  44   1          UNION_16 my_unTemp16;
  45   1          
  46   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  47   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  48   1      
  49   1          my_unTemp16.un_temp16 = (UINT16)add;
  50   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  51   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  52   1      
  53   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  54   1          //EA = 0;
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:54:18 PAGE 2   

  55   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  56   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  57   1          _nop_();
  58   1          //EA = 1;
  59   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  60   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  61   1      }
  62          
  63          //擦除扇区, 入口:DPTR = 扇区地址
  64          void Sector_Erase(UINT16 add)
  65          {
  66   1          UNION_16 my_unTemp16;
  67   1          
  68   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  69   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  70   1      
  71   1          my_unTemp16.un_temp16 = add;
  72   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  73   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  74   1      
  75   1          //EA = 0;
  76   1          IAP_TRIG = CMD_TRIG_H;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  77   1          IAP_TRIG = CMD_TRIG_L;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  78   1          _nop_();
  79   1          //EA = 1;
  80   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  81   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  82   1      }
  83          
  84          void IAP_Disable()
  85          {
  86   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  87   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  88   1          IAP_CONTR = 0;      //关闭IAP 功能
  89   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  90   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  91   1          IAP_ADDRH = 0;
  92   1          IAP_ADDRL = 0;
  93   1      }
  94           
  95          
  96          /*************************************************************************
  97                                Read len bytes from eeprom
  98          **************************************************************************/
  99          
 100          void eeprom_read_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
 101          {
 102   1          UINT8 i;
 103   1      
 104   1          for (i = 0; i < len; i++)
 105   1          {
 106   2              Buffer[i] = Byte_Read(beginAddr);
 107   2              beginAddr++;
 108   2          }
 109   1          
 110   1          return;
 111   1      }
 112          
 113          /*************************************************************************
 114                                write len bytes to eeprom
 115          **************************************************************************/
 116          void eeprom_write_block(UINT8 * Buffer, UINT8 * beginAddr, UINT8 len)
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:54:18 PAGE 3   

 117          {
 118   1          UINT8 i;
 119   1      
 120   1          for (i = 0; i < len; i++)
 121   1          {
 122   2              Byte_Program(beginAddr, Buffer[i]);
 123   2              beginAddr++;
 124   2          }
 125   1      
 126   1          return;
 127   1      }
 128          
 129          /*************************************************************************
 130                                erase a sector
 131          **************************************************************************/
 132          
 133          //data flash: all 4K 
 134          //512Byte/sector, 8 sectors
 135          //Writing data flash must erase the sector, and then write every byte;
 136          //Each sector address as follows:
 137          UINT16 code SECTOR_PAGE[] = {    
 138              0x0000, 0x0010, 0x0020, 0x0600, 
 139              0x0800, 0x0A00, 0x0C00, 0x0E00
 140          };
 141          
 142          void eeprom_erase_sector(UINT16 pageAddr)
 143          {
 144   1          Sector_Erase(pageAddr);
 145   1          
 146   1          return;
 147   1      }
 148          
 149          /*************************************
 150            Read Parameter from inn EEPROM
 151            with verify
 152          *************************************/
 153          #define PARA_LEN    5
 154          UINT8 ReadParaInEeprom(UINT8 offset)
 155          {
 156   1        UINT8 i = offset;
 157   1        UINT8 para_page_0[PARA_LEN];
 158   1        UINT8 para_page_1[PARA_LEN];
 159   1        UINT8 para_page_2[PARA_LEN];
 160   1      
 161   1        if (offset >= PARA_LEN) return 0xff;
 162   1        
 163   1          eeprom_read_block(para_page_0, (UINT8 *)SECTOR_PAGE[0], PARA_LEN);
 164   1          eeprom_read_block(para_page_1, (UINT8 *)SECTOR_PAGE[1], PARA_LEN);
 165   1          eeprom_read_block(para_page_2, (UINT8 *)SECTOR_PAGE[2], PARA_LEN);
 166   1         
 167   1        if (para_page_0[i] == para_page_1[i])
 168   1        {
 169   2      //    if (para_page_1[i] != para_page_2[i])           //sector 2 error
 170   2      //    {
 171   2              para_page_2[i] = para_page_0[i];            //Modify error byte
 172   2      //            eeprom_erase_sector(SECTOR_PAGE[2]);        //Erase sector 2
 173   2      //                                                        //Write sector 2
 174   2      //        eeprom_write_block(para_page_2, (UINT8 *)SECTOR_PAGE[2] , PARA_LEN);
 175   2      //    }
 176   2          return para_page_0[i];  
 177   2        }
 178   1        else if (para_page_0[i] == para_page_2[i])          //sector 1 error
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:54:18 PAGE 4   

 179   1        {
 180   2              para_page_1[i] = para_page_0[i];                //Modify error byte
 181   2      //      eeprom_erase_sector(SECTOR_PAGE[1]);            //Erase sector 1
 182   2      //                                                      //Write sector 1
 183   2      //      eeprom_write_block(para_page_1, (UINT8 *)SECTOR_PAGE[1] , PARA_LEN);
 184   2            return para_page_0[i];  
 185   2        }
 186   1        else                                                //Sector 0 error
 187   1        {
 188   2            para_page_0[i] = para_page_1[i];                //Modify error byte
 189   2      //      eeprom_erase_sector(SECTOR_PAGE[0]);            //Erase sector 0
 190   2      //      eeprom_write_block(para_page_0, (UINT8 *)SECTOR_PAGE[0] , PARA_LEN);
 191   2            return para_page_1[i];        
 192   2        }
 193   1      }
 194          /*******************************************************************************
 195                        save Parameter to EEPROM
 196            input:   none
 197            output:  none         
 198          *******************************************************************************/
 199          void SaveParaToBlock()
 200          {
 201   1        UINT8 i;
 202   1        UINT8 buffer[5];
 203   1        buffer[0] = address[0] * 100 + address[1]*10 + address[2];
 204   1        buffer[1] = FinishedLED;
 205   1        buffer[2] = WtTime;
 206   1        buffer[3] = FnDefine;
 207   1        buffer[4] = DispMode;
 208   1        eeprom_erase_sector(SECTOR_PAGE[0]); 
 209   1        for (i=0; i<3; i++)                    //实行多次存储
 210   1        {   
 211   2          eeprom_write_block (buffer, (UINT8 *)SECTOR_PAGE[i], 5);
 212   2          //led_blink();
 213   2        }
 214   1      }
 215          /*******************************************************************************
 216                        Load Parameter from EEPROM
 217            input:   none      
 218            output:  none         
 219          *******************************************************************************/
 220          void LoadParaInEeprom(void)
 221          {
 222   1        UINT8 buffer[5];
 223   1      
 224   1        buffer[0] = ReadParaInEeprom(EE_ADDRESS);
 225   1        buffer[1] = ReadParaInEeprom(EE_FINISHEDLED);
 226   1        buffer[2] = ReadParaInEeprom(EE_WTTIME);
 227   1        buffer[3] = ReadParaInEeprom(EE_FNDEFINE);
 228   1        buffer[4] = ReadParaInEeprom(EE_DISPMODE);
 229   1      
 230   1          if (buffer[0] > MAX_ADDR)   
 231   1          {
 232   2              buffer[0] = 1;          //默认加载参数
 233   2          }
 234   1          if (buffer[1] > 3)      //Finished LED    0,1,2,3
 235   1          {
 236   2              buffer[1] = 0;         
 237   2          }
 238   1          if (buffer[2] > 5)      //WtTime      0:80ms; 1:160ms;  2:240ms;  3:320ms;  4:400;  5:480
 239   1          {
 240   2              buffer[2] = 5;         
C51 COMPILER V9.52.0.0   EEPROM                                                            11/15/2016 10:54:18 PAGE 5   

 241   2          }
 242   1          if (buffer[3] > 1)      //FnDefine      0:ZeroPick;   1:FullContainer Pick
 243   1          {
 244   2              buffer[3] = 0;         
 245   2          }
 246   1          if (buffer[4] > 1)      //DispMode      0:TaskDisp;   1:Text Disp
 247   1          {
 248   2              buffer[4] = 0;         
 249   2          }
 250   1      
 251   1        address[0] = (UINT8)(buffer[0]/100);
 252   1        address[1] = (UINT8)(((UINT8)(buffer[0]%100))/10);
 253   1        address[2] = buffer[0]%10;
 254   1      
 255   1        FinishedLED = buffer[1];
 256   1        WtTime = buffer[2];
 257   1        FnDefine = buffer[3];
 258   1        DispMode = buffer[4];
 259   1      }
 260          /*******************************************************************************
 261                          END         
 262          *******************************************************************************/
 263          
 264          
 265          
 266          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    890    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
