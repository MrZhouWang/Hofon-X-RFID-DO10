C51 COMPILER V9.00   MAIN                                                                  07/20/2016 13:38:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\OUT\main.obj
COMPILER INVOKED BY: C:\C51\BIN\C51.EXE ..\SRC\main.c LARGE BROWSE INCDIR(..\INC;..\PRO;..\SRC) DEBUG OBJECTEXTEND PRINT
                    -(.\main.lst) OBJECT(..\OUT\main.obj)

line level    source

   1          /*=========================================================
   2          // ³ÌÐò¸ü¸ÄËµÃ÷
   3          
   4          =========================================================*/
   5          
   6          #define  MAIN_GLOBAL
   7          #include "include.h"
   8          unsigned short timerc;
   9          volatile OS_SYS sys;
  10          
  11          ///////////////////////////////È«¾Ö±äÁ¿/////////////////////////////////////
  12          
  13          unsigned char code rc_data[16] ={0x12,0x34,0x56,0x78,0xED,0xCB,0xA9,0x87,0x12,0x34,0x56,0x78,0x01,0xFE,0x0
             -1,0xFE};
  14          //M1¿¨µÄÄ³Ò»¿éÐ´ÎªÈçÏÂ¸ñÊ½£¬Ôò¸Ã¿éÎªÇ®°ü£¬¿É½ÓÊÕ¿Û¿îºÍ³äÖµÃüÁî
  15          //4×Ö½Ú½ð¶î£¨µÍ×Ö½ÚÔÚÇ°£©£«4×Ö½Ú½ð¶îÈ¡·´£«4×Ö½Ú½ð¶î£«1×Ö½Ú¿éµØÖ·£«1×Ö½Ú¿éµØÖ·È¡·´£«1×Ö½Ú¿éµØÖ·£«1×Ö½Ú¿éµØÖ
             -·È¡·´ 
  16          unsigned char  xdata  DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; 
  17          
  18          
  19          
  20          
  21          
  22          
  23          volatile UINT8   digital_led_loading = OFF;
  24          volatile UINT8   digital_led_refresh = OFF;
  25          volatile UINT16  digital_led_loading_static = 0;
  26          volatile UINT8   led_static_warn = OFF;//µ±±¾±êÇ©°´ÏÂ°´Å¥ºóµÄÐÅÏ¢10ÃëÖÓºó£¬
  27                                                                          //ÆäÊý¾Ý¶¼»¹Ã»±»²É¼¯ÉÏÈ¥£¬ÔòÀ¶É«ÉÁË¸£©£»
  28          //volatile UINT16   led_static_warn_cnt = 0;
  29          //volatile UINT8 led_flash_switch =OFF;
  30          
  31          volatile UINT8 led_flash_NO =LED_RED;                                   //µÆ×é¿ØÖÆ
  32          volatile UINT16 led_flash_period=1000;                                  //ÉÁË¸ÖÜÆÚ¿ØÖÆ
  33          volatile UINT8 led_flash_mode =LED_FLASH_MODE_1V1;              //ÁÁÃðÊ±¼ä±ÈÀý¿ØÖÆ:0³£ÁÁ
  34          volatile UINT8 led_flash_status = 0;                                    //ÉÁË¸¿ØÖÆµÆÊ±£¬µÆµ±Ç°µÄ×´Ì¬,0¡ª¡ªÃð£»1¡ª¡ªÁÁ
  35          volatile UINT8 led_flash_NO_BK =LED_RED;                                //µÆ×é¿ØÖÆ±¸·ÝÊý¾Ý(À­½ø¶ÈÌõºóÊ¹ÓÃ)
  36          
  37          //Î´Íê³ÉÈÎÎñ¿é
  38          volatile UINT8 beSettingAddr = 0;                                               //0:·ÇÉèÖÃÕ¾Ö·          1:ÉèÖÃÕ¾Ö·              2£ºÕ¾Ö·Éè¶¨ÒÑ¾­°´ÏÂOK¼ü
  39          volatile UINT8 toSettedAddr[3];                                                 //´ýÉè¶¨µØÖ·Öµ
  40          volatile UINT8 task_unupdate_num = 0;                           //Ö÷»úÎ´ÏÂ´«×÷ÒµÈÎÎñ×ÜÊý
  41          volatile UINT8 task_unfinish_num =0;                                    //Î´Íê³ÉÈÎÎñ×ÜÊý= 0,1...MAX_TASK_NUM
  42          volatile UINT8 task_unfinish_NO[MAX_TASK_NUM] ={0};             //»õÎ»ºÅ
  43          volatile UINT8 task_un_goods_numH[MAX_TASK_NUM] ={0};   //ÉÌÆ·Êý¾Ý¸ßÎ»
  44          volatile UINT8 task_un_goods_numL[MAX_TASK_NUM] ={0};   //ÉÌÆ·Êý¾ÝµÍÎ»
  45          
  46          ///ÒÑÍê³ÉÈÎÎñ¿é
  47          volatile UINT8 task_finished_num =0;                                    //ÒÑÍê³ÉÈÎÎñ×ÜÊý= 0,1...MAX_TASK_NUM
  48          volatile UINT8 task_finished_NO[MAX_TASK_NUM] ={0};             //»õÎ»ºÅ
  49          volatile UINT8 task_ed_goods_numH[MAX_TASK_NUM] ={0};   //ÉÌÆ·Êý¾Ý¸ßÎ»
  50          volatile UINT8 task_ed_goods_numL[MAX_TASK_NUM] ={0};   //ÉÌÆ·Êý¾ÝµÍÎ»
  51          
  52          volatile UINT8 SystemLocked = OFF;                                              //Ëø¶¨ÏµÍ³¡¢½âËøÏµÍ³
C51 COMPILER V9.00   MAIN                                                                  07/20/2016 13:38:26 PAGE 2   

  53          
  54          volatile DisplayInfo DispInfoCur;                                               //µ±Ç°ÏÔÊ¾ÐÅÏ¢           
  55          ///////////////////////////////È«¾Ö±äÁ¿-END-////////////////////////////////
  56           
  57          ////////////////////////////////////////////////////////////////////////////////
  58          // ¹¦ÄÜÃèÊö : main program
  59          // ÊäÈë²ÎÊý : 
  60          // ·µ»Ø²ÎÊý : 
  61          // ËµÃ÷     :  
  62          ////////////////////////////////////////////////////////////////////////////////
  63          int main(void) 
  64          {   
  65   1      //      DelayMs(200);    //µÈ´ýµçÔ´ÎÈ¶¨        
  66   1      //
  67   1      //      EA = 0;
  68   1      //      digital_led_cntrl_Init();
  69   1      //      IO_Init();
  70   1      //      InitT0();
  71   1      //
  72   1      //      LoadParaInEeprom();
  73   1      //      baudrate   = BD_9600;
  74   1      //      UART232_Init();
  75   1      //      UART485_Init(); //¹Ì¶¨Ê¹ÓÃ38400²¨ÌØÂÊ
  76   1      //
  77   1      //
  78   1      //                 
  79   1      //      Start_Init();
  80   1      //      M485_CTRL_OFF;
  81   1      //      EA = 1;//Ê¹ÄÜÖÐ¶Ï                                       
  82   1      //      while(1)
  83   1      //      {       
  84   1      //              P0M1 = 0x00;      //µÆËþÇ¿ÍÆÍìÊä³ö
  85   1      //              P0M0 = 0x0f;
  86   1      //
  87   1      //              P1M1 = 0x00;
  88   1      //              P1M0 = 0x83;
  89   1      //              
  90   1      //              //µØÖ·Éè¶¨Ê±ÏÔÊ¾µØÖ·£¬²¢ÁÁµÆ
  91   1      //              if(beSettingAddr == 1 ||  beSettingAddr == 2)
  92   1      //              {
  93   1      //                      if(digital_led_refresh == ON)
  94   1      //                      {
  95   1      //                              digital_led_refresh = OFF;
  96   1      //                              digital_led_dispaddr();
  97   1      //                      }
  98   1      //              }
  99   1      //              //1¸öÐÅºÅµÆÓë3×éledÖ¸Ê¾µÆÉÁË¸¿ØÖÆ
 100   1      //              CMD_led_flash();
 101   1      //              //µÆËþµçÔ´¿ØÖÆ
 102   1      //              CMD_LigheTower_flash();
 103   1      //              //Ë¢ÐÂÒ»´ÎÊýÂë¹ÜÊýÖµ£¨°üÀ¨ÏÔÊ¾µ±Ç°×÷ÒµµÄÒÔ¼°Êý¾Ý»ØÏÔ£©
 104   1      //              if( digital_led_refresh == ON) 
 105   1      //              {
 106   1      //                      digital_led_refresh = OFF;
 107   1      //                      digital_led_disp();
 108   1      //              }
 109   1      //              //°´¼ü´¦Àí(ÓÐ°´¼üÊ±)
 110   1      //              Scan_Keyboard();
 111   1      //              if (keyStatus != CMD_KEY_NULL) 
 112   1      //              {
 113   1      //                      Process_Keyboard();
 114   1      //              }
C51 COMPILER V9.00   MAIN                                                                  07/20/2016 13:38:26 PAGE 3   

 115   1      //              //´¦Àí485Í¨Ñ¶
 116   1      //              if (uart.rFlag == ON)
 117   1      //              {
 118   1      //                      Send485SerialByte((UINT8 *)uart.rBuffer, uart.rIndex);  //´®¿Ú´òÓ¡½ÓÊÕµ½µÄÊý¾Ý
 119   1      //                      Cmd_Process();
 120   1      //                      uart.rFlag   = OFF;
 121   1      //                      uart.rIndex  = 0;
 122   1      //              }
 123   1      //      }             
 124   1      
 125   1           InitializeSystem( );
 126   1           PcdReset();
 127   1           PcdAntennaOff(); 
 128   1           PcdAntennaOn(); 
 129   1           while ( 1 )
 130   1           {   
 131   2      
 132   2      //                      status = PcdRequest(PICC_REQALL, g_ucTempbuf);//Ñ°¿¨
 133   2      //              if (status != MI_OK)
 134   2      //              {   
 135   2      //                        InitializeSystem( );
 136   2      //                  PcdReset();
 137   2      //                  PcdAntennaOff(); 
 138   2      //                  PcdAntennaOn(); 
 139   2      //                            continue;
 140   2      //            }
 141   2      //                 status = PcdAnticoll(g_ucTempbuf);//·À³å×²
 142   2      //           if (status != MI_OK)
 143   2      //           {    
 144   2      //                              continue;  
 145   2      //                 }
 146   2      //                 status = PcdSelect(g_ucTempbuf);//Ñ¡¶¨¿¨Æ¬
 147   2      //           if (status != MI_OK)
 148   2      //           {  
 149   2      //                      continue;   
 150   2      //                 }
 151   2      //         
 152   2      //           status = PcdAuthState(PICC_AUTHENT1A, 1, DefaultKey, g_ucTempbuf);//ÑéÖ¤¿¨Æ¬ÃÜÂë
 153   2      //           if (status != MI_OK)
 154   2      //           {  
 155   2      //                      continue;    
 156   2      //             }
 157   2      //
 158   2      //         
 159   2      //           status = PcdRead(3, g_ucTempbuf);//¶Á¿é
 160   2      //           if (status != MI_OK)
 161   2      //           {  
 162   2      //                      continue;   
 163   2      //                 }
 164   2      //           printf("¿¨¶Á¿é£º");        //³¬¼¶ÖÕ¶ËÏÔÊ¾,
 165   2      //           for(i=0;i<16;i++)
 166   2      //                 {
 167   2      //                              temp=g_ucTempbuf[i];
 168   2      //                              printf("%X",temp);
 169   2      //                                              
 170   2      //                 }
 171   2      //
 172   2      //                 printf("\n");
 173   2      //                 PcdHalt();
 174   2                              //RC_Blink_ok();
 175   2                              //M1_Read(PICC_AUTHENT1A,3,16,DefaultKey);
 176   2        
C51 COMPILER V9.00   MAIN                                                                  07/20/2016 13:38:26 PAGE 4   

 177   2              }
 178   1      }
 179          
 180          ////////////////////////////////////////////////////////////////////////////////
 181          // ¹¦ÄÜÃèÊö £ºÏµÍ³³õÊ¼»¯  
 182          // ÊäÈë²ÎÊý : ÎÞ
 183          // ·µ»Ø²ÎÊý : ÎÞ
 184          // ËµÃ÷     : ¸÷ÖÖ³õÊ¼»¯
 185          ////////////////////////////////////////////////////////////////////////////////
 186          void InitializeSystem()
 187          {
 188   1      /*      P0M1 = 0x0; P0M2 = 0x0;
 189   1              P1M1 = 0x0;     P1M2 = 0x0;                      
 190   1              P3M1 = 0x0; P3M2 = 0xFF; 
 191   1      */      P0 = 0xFF; P1 = 0xFF; P3 = 0xFF;P2 = 0xFF;
 192   1              AUXR &= 0x7F;           //¶¨Ê±Æ÷Ê±ÖÓ12TÄ£Ê½
 193   1              TMOD=0x21;                 //ÉèT0Îª·½Ê½1
 194   1              SCON=0x50;
 195   1              TH1=0xFD;          //²¨ÌØÂÊÎª9600bps
 196   1              TL1=0xFD;
 197   1              TH0=TH0_INIT;
 198   1              TL0=TL0_INIT; 
 199   1              TR0=1;  
 200   1              ET0=1;             //ÔÊÐíT0ÖÐ¶Ï
 201   1              TR1=1;                     //¿ªÆô¶¨Ê±Æ÷
 202   1              TI=1;                       //´®¿Ú·¢ËÍ±êÖ¾Î»
 203   1              EA=1;                           //¿ªÆô×ÜÖÐ¶Ï
 204   1              TF0 = 0;                //Çå³ýTF0±êÖ¾
 205   1              ES = 1;
 206   1              RI = 1;
 207   1      
 208   1       
 209   1      }
 210          //////////////////////////////////////////////////////////////////////////////////
 211          //// ¹¦ÄÜÃèÊö : ¶¨Ê±Æ÷ÖÐ¶ÏÈë¿Ú
 212          //// ÊäÈë²ÎÊý : 
 213          //// ·µ»Ø²ÎÊý : 
 214          //// ËµÃ÷     :  
 215          //////////////////////////////////////////////////////////////////////////////////
 216          void timer0_int (void) interrupt 1
 217          { 
 218   1          TH0  = TH0_INIT;
 219   1          TL0  = TL0_INIT;
 220   1          rc_cont++;
 221   1              if(rc_cont>RC_CON)
 222   1              {
 223   2                  M1_Read(PICC_AUTHENT1A ,3,16,DefaultKey);   
 224   2              }
 225   1              if(rc_blink_read>0)       //¶Á¿¨»òÕßÐ´¿¨³É¹¦ºóÖ¸Ê¾µÆÁÁ
 226   1              {
 227   2                      rc_blink_read--;
 228   2                      led_on();
 229   2              }
 230   1              else
 231   1              {
 232   2                      led_off();
 233   2              }
 234   1      //       int index = 0;
 235   1      //
 236   1      //        
 237   1      //    sys.led_scan_flag  = ON;
 238   1      //    //´®¿Ú1-485»º³åÇøÓÐÊý¾Ý
C51 COMPILER V9.00   MAIN                                                                  07/20/2016 13:38:26 PAGE 5   

 239   1      //    if (uart.rIndex != 0)                             
 240   1      //    {
 241   1      //        if (uart.rTimer-- == 0) 
 242   1      //        {
 243   1      //                      uart.rFlag  = ON;
 244   1      //              }
 245   1      //    }
 246   1      //
 247   1      //    //´®¿Ú2-232»º³åÇøÓÐÊý¾Ý
 248   1      //    if (uart232.rIndex != 0)                          
 249   1      //    {
 250   1      //              if (uart232.rTimer-- == 0) 
 251   1      //              {
 252   1      //                      uart232.rFlag  = ON;
 253   1      //                      digital_led_refresh = ON;
 254   1      //              }
 255   1      //    }    
 256   1      //    //µÝ¼õ¼ÆËãÆ÷£¬×Ô¼õ1
 257   1      //    if (sys.led_flash_count != 0)
 258   1      //        sys.led_flash_count--;
 259   1      //      for(index = 0; index < 6; index++)
 260   1      //      {
 261   1      //              if(LightTowerCtl[index].led_flash_count > 0)
 262   1      //                      LightTowerCtl[index].led_flash_count--;
 263   1      //      }
 264   1      //    //°¤¸öÉ¨ÃèÊýÂë¹Ü
 265   1      //    led_Scan();
 266   1              timerc++;
 267   1              if(timerc>1000)
 268   1              {
 269   2                 p_led_red =1;
 270   2                
 271   2              }
 272   1              else
 273   1                 p_led_red =0;
 274   1              if(timerc>2000)
 275   1                 timerc=0;
 276   1      }
 277          /*******************************************************************************
 278                                                                          END                                     
 279          *******************************************************************************/
 280          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    265    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =     83    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
